/*! For license information please see de6527cb52d055ac0e6b5b7470c4017a68bcc17d-94469a0318e9d90f7651.js.LICENSE.txt */
(self.webpackChunkportfolio=self.webpackChunkportfolio||[]).push([[243],{3159:function(e,t,n){"use strict";n.d(t,{A:function(){return d}});var a=n(7294),r=n(1082),o=n(7906);function i(e){var t=e.toggleMenu,n=e.open;return a.createElement("div",{className:"menu__button "+(n?"open":""),id:"hamburger",onClick:t},a.createElement("span",null),a.createElement("span",null),a.createElement("span",null))}var s=[{name:"home",url:"/"},{name:"projects",url:"/projects"},{name:"resume",url:"/resume"}];function l(){var e=(0,a.useState)(!1),t=e[0],n=e[1];return a.createElement("nav",{className:t?"open":""},a.createElement(i,{toggleMenu:function(){n(!t)},open:t}),a.createElement("ul",null,s.map((function(e){return a.createElement("li",{key:e.url},a.createElement(r.rU,{to:e.url,activeClassName:"active"},e.name))}))))}var c=function(e){var t=e.hideLogo;return a.createElement("header",null,t?a.createElement(o.x,{type:"h1",className:"intro__wrapper"},"Hoi,",a.createElement("br",null)," ik ben ",a.createElement("span",{className:"highlight"},"Amelia")):a.createElement(r.rU,{to:"/",className:"header__info"},a.createElement("span",null,a.createElement("h1",null,"Amelia"),a.createElement("p",null,"Australian with working rights in the Netherlands"),a.createElement("p",null,a.createElement("em",null,"Ik ben Nederlands aan het leren")))),a.createElement(l,null))},u=function(){return a.createElement("footer",null)},h=n(5924),d=function(e){var t=e.children,n=e.className,r=void 0===n?"":n,o=e.hideLogo,i=void 0!==o&&o,s=(0,a.useContext)(h._);return(0,a.useEffect)((function(){}),[s]),a.createElement(h.W,null,a.createElement("div",{className:r+" body auto-dark-mode "},a.createElement("div",{className:"layout__wrapper"},a.createElement(c,{hideLogo:i}),a.createElement("main",{className:null!=r?r:""},t),a.createElement(u,null))))}},7906:function(e,t,n){"use strict";function a(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}n.d(t,{x:function(){return l}});var r=n(7294),o=["children"],i=function(e){var t=e.children,n=a(e,o),i=t;return[{condition:null==n?void 0:n.bold,wrapper:function(e){return r.createElement("strong",null,e)}},{condition:null==n?void 0:n.italic,wrapper:function(e){return r.createElement("em",null,e)}},{condition:null==n?void 0:n.underlined,wrapper:function(e){return r.createElement("u",null,e)}}].forEach((function(e,t){var n=e.condition,a=e.wrapper;return n?i=a(i):i})),i},s=["children","type","className"],l=function(e){var t=e.children,n=e.type,o=e.className,l=a(e,s);return r.createElement(c,{type:n,className:o},r.createElement(i,Object.assign({children:t},l)))},c=function(e){var t=e.type,n=e.children,a=e.className,o=void 0===a?"":a;switch(t){case"h1":return r.createElement("h1",{className:o},n);case"h2":return r.createElement("h2",{className:o},n);case"h3":return r.createElement("h3",{className:o},n);case"h4":return r.createElement("h4",{className:o},n);case"h5":return r.createElement("h5",{className:o},n);case"h6":return r.createElement("h6",{className:o},n);default:return r.createElement("p",{className:o},n)}}},5924:function(e,t,n){"use strict";n.d(t,{W:function(){return o},_:function(){return r}});var a=n(7294),r=(0,a.createContext)(null),o=function(e){var t=e.children,n=(0,a.useState)(null),o=n[0],i=n[1];return(0,a.useEffect)((function(){var e=window.location.search,t=new URLSearchParams(e).getAll("skill").map((function(e){return e.toLowerCase().split("-").join(" ")})),n=window.localStorage.getItem("skills"),a=n?JSON.parse(n):null;t.length>0&&!a||t.length>0&&a&&t.join()!==a.join()?(window.localStorage.setItem("skills",JSON.stringify(t)),i(t)):t.length<=0&&i(a)}),[]),a.createElement(r.Provider,{value:o},t)}},8520:function(e,t,n){"use strict";function a(e,t,n,a,r,o,i){try{var s=e[o](i),l=s.value}catch(c){return void n(c)}s.done?t(l):Promise.resolve(l).then(a,r)}n.d(t,{Z:function(){return l}});var r=n(4687),o=n.n(r),i=n(7294),s=JSON.parse('{"projects":{"task-manager":{"title":"Task Manager with Calendar","slug":"task-manager","img_src":"task-manager","img_alt":"Screenshots of task manager mobile view, superimposed on mobile phone held by hand","liveURL":"https://task-manager.everlearning.com.au/login/?username=guest&password=GuestPassword1!","gitHubURL":"https://github.com/AmeliaMargaurite/everlearning-task-manager","description":"Decluttered task manager with calendar view to plan projects. Allows for multiple users, multiple projects, categorising, CRUD operations. cPanel hosting with MySql database.","bulletPoints":["Created decluttered task and project manager","Calendar view shows tasks allocated to that day.","Uses: MySQL database, PHP for site build and database requests","Uses: Javascript Web Components, Drag and Drop API, Fetch API, Touch Events"],"skills":["PHP","MySql","Javascript","Web Components","cPanel","GitHub","SCSS"],"challenge":"Create a task manager which suited best my needs","goal":"<ul class=\'withPadding\'><li>Create decluttered task manager with kanban boards and calendar</li><li>Focus on clean, minimal design.</li><li>Show only options which I personally require (due date, categories etc) </li><li>Usable across mobile and desktop with same login and data</li></ul>","process":"This is a rebuild of an earlier project I\'d made using Preact and saving all data to localStorage. After creating this first proof of concept, I wanted to rebuild it with a database behind it for persistance between devices.<br/><br/>I decided to work with PHP and MySQL. I have used PHP a good amount over the years and feel comfortable with it, however this was my first real use of building a MySQL database from scratch. I have learned a lot through this process, and am still learning, about how best to make calls to the database, cacheing that data and so forth.<br/><br/>I am still in the process of adding a rich text editor to make the task descriptions more helpful. Most especially styles like lists. For now I have added a small \'code\' button to allow writing out HTML elements manually, until I have finished building the editor.","results":"The task manager works and I often use it to plan out next steps of various projects. The calendar still needs some work, however. It does function, and one can edit task details from the calendar. However it\'s not as user-friendly as I would like. On mobile it goes to the first week of the month, even if the current date is later than this. I am always on the lookout for these types of functionalities to improve.","reflection":"Overall the project solves the challenge it set out to. There are still parts which are works in progress, and more additions I would like to add. If (when) I rework it I would likely created a Laravel project instead as I\'ve now had some experience with this and appreciate what it has to offer","icon":"tasks"},"ind-appointment-checker":{"title":"IND Appointment Checker","slug":"ind-appointment-checker","img_src":"ind-checker","img_alt":"Screenshots of IND appointment checker desktop with mobile screenshot.","liveURL":"https://ind-checker.everlearning.com.au/","gitHubURL":"https://github.com/AmeliaMargaurite/ind_biometrics_appt_checker","bulletPoints":["View earliest available appointment at chosen locations","Multiple locations can be viewed at once to allow user to make an informed decision of where to book their appointment","Compared to IND website reduces number of clicks to view all necessary data"],"description":"Using IND data calls, shows the soonest available appointment from one or multiple locations, as well as all other appointments, in one easy view. Hosted with GitPages and Heroku.","skills":["Javascript","ExpressJS","NodeJS","Web Components","SCSS","GitHub"],"challenge":"During the process of obtaining my verblijftsvergunningen I needed to book two separate IND appointments, for Biometrics and for Document collection. My nearest IND desk was Amsterdam however there seemed to never be any appointments available. To check per desk on the IND website, you must first choose the desk, then click through a calendar, month by month to see whats available. Then if you want to check another desk, you do this process again. My options were to do this multiple times per day in the hopes of stumbling onto an appointment (as was the suggestion from multiple groups of people in the same position), or find another solution.","goal":"<ul class=\'withPadding\'><li>Discover how to obtain appointment data from IND</li><li>Create an ordered list by time of all appointments across any/all IND desks (per appointment type)</li><li>Ability to choose location(s) to soonest appointment, as well as all other appointments</li><li>Ability to choose number of people appointment is for, per IND limits</li><li>Extend appointment checker to other appointment options (Return Visa, Endorsement Sticker)</li></ul>","process":"Initially I created the solution for this in the console of the IND\'s website itself. I looked through the Network processes and found how the site called an API for data, and started manually calling it myself. Within half an hour of starting I had a short function which called the API\'s and created an ordered list of the four desks I was willing to visit, with appointments ordered by time. I had also in that time booked an upcoming appointment which I was able to see became available during this process.<br/><br/>I wanted to expand on this mini-project, and moved on to making a website for others to use. I was able to find the location codes for each desk, and which desks were available for each appointment type, by looking through the Network calls, and searching the IND website.<br/><br/>As I knew this would be a fairly simple build, I opted to use plain Javascript and Web Components, along with SCSS. I tried to build all parts as efficiently as possible, making it a fast and easy to use site.<br/><br/>I set up an express server on Heroku\'s free tier to do the calls to the API, and hosted the frontend using GitPages. All revisions of the site build were pushed to a GitHub repo.","results":"I have successfully used this page over a few months to secure various appointments. I find it easier to navigate and have a broader view of the situation than using the IND site itself. <br/><br/>The main differences are the ability to see much more information in one glance. This allows one to make an educated decision on where to book an appointment, as well as when. <br/><br/>During the Biometrics appointment you can nominate which desk to collect your documents from, or they automatically go to a specific desk depending on your location. This could mean you <strong>have</strong> to attend, say, Amsterdam, even if there are no appointments available in the next three months. While other desks have plenty of appointments available. <br/><br/>I used this information to make the choice of nominating to go to Den Haag, a further distance away, but I was able to complete my process much faster than if I had kept with the allocated desks.","reflection":"I am overall pleased with the function of the website. The UI design is very basic, while still being usable. It is not the most interesting design, however it is meant to be a utility first and foremost. In saying that, it could definitely use a redesign.<br/><br/>I have now allowed others to use the site and have had good responses so far.","icon":"appointment"},"walkers-creek":{"title":"Web Store","slug":"walkers-creek","img_src":"walkers-creek","img_alt":"Screenshots of Walkers Creek front end website in desktop and mobile, with admin site mobile screenshot.","liveURL":"https://www.walkerscreek.com.au","gitHubURL":"https://github.com/AmeliaMargaurite/walkers-creek","bulletPoints":["Uses mix of PHP and Javascript Web Components with Stripe payment system","Frontend site calls MySQL database for products and home page layout","Database response is saved to session to reduce unnecessary calls","On page change checks if any database changes have happened, recalls and resaves products and layout data if true"],"description":"Retail store front for purchases, uses Stripe API and MySql database with Laravel backend. Following best practices, this is a fast, responsive site. Detects changes to database and updates on next page load.","skills":["PHP","Javascript","Laravel","MySql","Web Components","SCSS","cPanel","GitHub"],"challenge":"Customer approached me to build a website for their small business in Australia. They currently create camping storage bags and sell them in their car upholstery business. However they are now ready to move having an online store solely for selling these products. They did not want to go with a ready-made solution, such as Squarespace or Shopify, given they wanted strong SEO and finer control over the website than these products provided.<br/><br/>Originally only a shop front was wanted, as products would change or be added so infrequently that they preferred I do those updates. However as the build progressed, and their business leapt forward they realised they were often creating brand new products, and changing existing ones, that it was decided they needed a backend to update themselves. As I know they\'re very busy people I knew the backend had to be built as simply as possible (to them) so that it took care of most of the work, and the users only had to fill in a minimal of information.","goal":"<ul class=\'withPadding\'><li>Clean, fast website</li><li>Use best practices for SEO and accessibility</li><li>Site should be optomised for speed, letting the server do the heavy lifting for the user</li><li>Front end needs to get product data from database, and cache this to keep the site fast and limit calls</li><li>In case of updates to the database, site needs to check if it\'s currently cached data is older than the latest update</li><li>Use Stripe API to handle actual processing of payments</li><li>Backend needs to show purchase details, shipping info etc for business owners</li></ul>","process":"As I wanted many parts of the frontend to be modular I decided to build this in PHP with Javascript Web Components. Originally this was meant to be a static site with all of the products hard coded, on the understanding that the products were very rarely going to change. As such, each products data was held in a separate file, referencing the Stripe API via their unique ID. Once it became clear that the customer would indeed need a backend they could update, all of this product data was moved to a MySQL database. They then use a url/slug prop to associate the Stripe product with the database product. This allows easy switching between test and live mode, as well as most updates to products in test mode moving across to live mode.","results":"","reflection":"","icon":"shop"},"discord-bot":{"title":"Discord Bot","slug":"discord-bot","img_src":"discord-bot","img_alt":"Image of wooden robot like toy with screw for an antenna.","gitHubURL":"https://github.com/AmeliaMargaurite/botty-bot-bot","bulletPoints":["Interactive bot for casual chat server","Has basic commands for random \'gifts\', puns etc","Has admin CRUD abilities to change saved gifts, puns etc"],"description":"Multi-purpose bot for Discord chat with user interaction and CRUD abilities","skills":["NodeJS","Javascript","Bash","cPanel","GitHub"],"challenge":"A Discord chatroom required a multi-purpose bot which would take commands from users and take action.","goal":"<ul class=\'withPadding\'> <li>Timer function - allow users to set a timer and the bot notify them when the timer is complete. </li><li>Timer functionality to also include user being able to stop the timer, other users able to join the timer, and to set a timer in the future.</li><li>Fun commands such as \'roulette\' and \'slap\' to which the bot responds with a random response to the requested user</li><li>CRUD operations for admin users to update the responses for \'roulette\', \'slap\' and \'pun\'</li></ul>","process":"I had to first familiarise myself with DiscordJS documentation, learn how to listen for particular user messages and respond. I then created a switch statement with possible commands which responds via separate functions.<br/><br/>Once the bot was live and being used with basic functionality, I set up a second instance of the bot to test updates and new features with. This required me to change my deployment methods from pushing straight to a git instance on my own server to pushing to a repositories folder and using a cPanel.yml file to copy only selected files and folders to the bots node folder. This made pushing tested changes to the \'live\' bot much faster and more reliable. At this time I also utilised the nodemon package to deploy the bot, which would detect changes to the build and restart mostly seemlessly.<br/><br/>In the beginning the pre-written responses for \'roulette\' and such were saved in separate json files in the src folder. A random number is generated to select a response to send back to the user. As I started working on admin CRUD operations I realised that these files needed to live further up the folder tree so that when changes were push via git commands, the files weren\'t overwritten. For this I was able to use NodeJS\' functionality.","results":"This project gave me the chance to dive into a few new territories, such as cPanel.yml files, NodeJS and a lot of work using the cPanel terminal. All of which I have since used to improve other projects.<br/><br/>The bot itself is used on a daily (24/7) basis on a Discord server with approximately 180 members. <br/><br/>Updates are easy to implement, and if errors happen (rare these days), the error is caught at the bot can continue working while an error message is sent to a separate server, and to myself to action.","reflection":"My abilities to bug-hunt, refactor and learn new technologies were strengthened through the process of building this bot. Setting up the CI/CD in the form of cPanel.yml and git services sped up pushing improvements and testing. This has since spread into my other projects, greatly improving development and learning in general.","icon":"discord"},"rummikub-og":{"title":"Rummikub - Old Build","slug":"rummikub-og","img_src":"","img_alt":"","liveURL":"https://ameliamargaurite.github.io/ind_biometrics_appt_checker","gitHubURL":"https://github.com/AmeliaMargaurite/ind_biometrics_appt_checker","bulletPoints":["Built to play with partner online during COVID separation"],"description":"Online version of Rummikub board game. Allows up to four players.","skills":["Javascript","Web Components","SCSS","cPanel"],"challenge":"","goal":"","process":"","results":"","reflection":"","icon":"heart","old":true},"four-in-a-row-og":{"title":"Four In A Row - Old Build","slug":"four-in-a-row-og","img_src":"","img_alt":"","liveURL":"https://ameliamargaurite.github.io/ind_biometrics_appt_checker","gitHubURL":"https://github.com/AmeliaMargaurite/ind_biometrics_appt_checker","bulletPoints":["Built to play with partner online during COVID separation"],"description":"Online two-player game of \'four-in-a-row\'","skills":["Javascript","SCSS","cPanel"],"challenge":"","goal":"","process":"","results":"","reflection":"","icon":"dice","old":true},"task-manager-og":{"title":"Task Manager - Old Build","slug":"task-manager-og","img_src":"","img_alt":"","liveURL":"https://ameliamargaurite.github.io/ind_biometrics_appt_checker","gitHubURL":"https://github.com/AmeliaMargaurite/ind_biometrics_appt_checker","bulletPoints":["First built of Task Manager using Preact and localStorage"],"description":"Original build of task manager with all data saved locally","skills":["Preact","Javascript","SCSS"],"challenge":"","goal":"","process":"","results":"","reflection":"","icon":"clipboard","old":true}}}');function l(){var e=(0,i.useState)(null),t=e[0],n=e[1];return(0,i.useEffect)((function(){var e=function(){var e,t=(e=o().mark((function e(){return o().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:n(s?null==s?void 0:s.projects:null);case 1:case"end":return e.stop()}}),e)})),function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function s(e){a(i,r,o,s,l,"next",e)}function l(e){a(i,r,o,s,l,"throw",e)}s(void 0)}))});return function(){return t.apply(this,arguments)}}();e()}),[]),t}},7061:function(e,t,n){var a=n(8698).default;function r(){"use strict";e.exports=r=function(){return t},e.exports.__esModule=!0,e.exports.default=e.exports;var t={},n=Object.prototype,o=n.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},s=i.iterator||"@@iterator",l=i.asyncIterator||"@@asyncIterator",c=i.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(N){u=function(e,t,n){return e[t]=n}}function h(e,t,n,a){var r=t&&t.prototype instanceof m?t:m,o=Object.create(r.prototype),i=new x(a||[]);return o._invoke=function(e,t,n){var a="suspendedStart";return function(r,o){if("executing"===a)throw new Error("Generator is already running");if("completed"===a){if("throw"===r)throw o;return L()}for(n.method=r,n.arg=o;;){var i=n.delegate;if(i){var s=S(i,n);if(s){if(s===p)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===a)throw a="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);a="executing";var l=d(e,t,n);if("normal"===l.type){if(a=n.done?"completed":"suspendedYield",l.arg===p)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(a="completed",n.method="throw",n.arg=l.arg)}}}(e,n,i),o}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(N){return{type:"throw",arg:N}}}t.wrap=h;var p={};function m(){}function f(){}function g(){}var b={};u(b,s,(function(){return this}));var w=Object.getPrototypeOf,v=w&&w(w(P([])));v&&v!==n&&o.call(v,s)&&(b=v);var y=g.prototype=m.prototype=Object.create(b);function k(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function I(e,t){function n(r,i,s,l){var c=d(e[r],e,i);if("throw"!==c.type){var u=c.arg,h=u.value;return h&&"object"==a(h)&&o.call(h,"__await")?t.resolve(h.__await).then((function(e){n("next",e,s,l)}),(function(e){n("throw",e,s,l)})):t.resolve(h).then((function(e){u.value=e,s(u)}),(function(e){return n("throw",e,s,l)}))}l(c.arg)}var r;this._invoke=function(e,a){function o(){return new t((function(t,r){n(e,a,t,r)}))}return r=r?r.then(o,o):o()}}function S(e,t){var n=e.iterator[t.method];if(void 0===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=void 0,S(e,t),"throw"===t.method))return p;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return p}var a=d(n,e.iterator,t.arg);if("throw"===a.type)return t.method="throw",t.arg=a.arg,t.delegate=null,p;var r=a.arg;return r?r.done?(t[e.resultName]=r.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,p):r:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,p)}function E(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function _(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function x(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(E,this),this.reset(!0)}function P(e){if(e){var t=e[s];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var n=-1,a=function t(){for(;++n<e.length;)if(o.call(e,n))return t.value=e[n],t.done=!1,t;return t.value=void 0,t.done=!0,t};return a.next=a}}return{next:L}}function L(){return{value:void 0,done:!0}}return f.prototype=g,u(y,"constructor",g),u(g,"constructor",f),f.displayName=u(g,c,"GeneratorFunction"),t.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===f||"GeneratorFunction"===(t.displayName||t.name))},t.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,g):(e.__proto__=g,u(e,c,"GeneratorFunction")),e.prototype=Object.create(y),e},t.awrap=function(e){return{__await:e}},k(I.prototype),u(I.prototype,l,(function(){return this})),t.AsyncIterator=I,t.async=function(e,n,a,r,o){void 0===o&&(o=Promise);var i=new I(h(e,n,a,r),o);return t.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},k(y),u(y,c,"Generator"),u(y,s,(function(){return this})),u(y,"toString",(function(){return"[object Generator]"})),t.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var a=t.pop();if(a in e)return n.value=a,n.done=!1,n}return n.done=!0,n}},t.values=P,x.prototype={constructor:x,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(_),!e)for(var t in this)"t"===t.charAt(0)&&o.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function n(n,a){return i.type="throw",i.arg=e,t.next=n,a&&(t.method="next",t.arg=void 0),!!a}for(var a=this.tryEntries.length-1;a>=0;--a){var r=this.tryEntries[a],i=r.completion;if("root"===r.tryLoc)return n("end");if(r.tryLoc<=this.prev){var s=o.call(r,"catchLoc"),l=o.call(r,"finallyLoc");if(s&&l){if(this.prev<r.catchLoc)return n(r.catchLoc,!0);if(this.prev<r.finallyLoc)return n(r.finallyLoc)}else if(s){if(this.prev<r.catchLoc)return n(r.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<r.finallyLoc)return n(r.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var a=this.tryEntries[n];if(a.tryLoc<=this.prev&&o.call(a,"finallyLoc")&&this.prev<a.finallyLoc){var r=a;break}}r&&("break"===e||"continue"===e)&&r.tryLoc<=t&&t<=r.finallyLoc&&(r=null);var i=r?r.completion:{};return i.type=e,i.arg=t,r?(this.method="next",this.next=r.finallyLoc,p):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),p},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),_(n),p}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var a=n.completion;if("throw"===a.type){var r=a.arg;_(n)}return r}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:P(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),p}},t}e.exports=r,e.exports.__esModule=!0,e.exports.default=e.exports},8698:function(e){function t(n){return e.exports=t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e.exports.__esModule=!0,e.exports.default=e.exports,t(n)}e.exports=t,e.exports.__esModule=!0,e.exports.default=e.exports},4687:function(e,t,n){var a=n(7061)();e.exports=a;try{regeneratorRuntime=a}catch(r){"object"==typeof globalThis?globalThis.regeneratorRuntime=a:Function("r","regeneratorRuntime = r")(a)}}}]);
//# sourceMappingURL=de6527cb52d055ac0e6b5b7470c4017a68bcc17d-94469a0318e9d90f7651.js.map